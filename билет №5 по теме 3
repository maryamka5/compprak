№ 1(C++)
#include <iostream>
#include <cmath>

using namespace std;

double func(double x) {
  return x * (5 + pow(x, 2)) - 1;
}

double integrate_rectangle(double a, double b, int n) {
  double h = (b - a) / n;
  double sum = 0;
  for (int i = 0; i < n; ++i) {
    sum += func(a + i * h) * h;
  }
  return sum;
}

double integrate_trapezoid(double a, double b, int n) {
  double h = (b - a) / n;
  double sum = 0;
  for (int i = 0; i < n; ++i) {
    sum += func(a + i * h) + func(a + (i + 1) * h);
  }
  sum *= h / 2;
  return sum;
}

double integrate_simpson(double a, double b, int n) {
  double h = (b - a) / n;
  double sum1 = 0, sum2 = 0;
  for (int i = 1; i < n; i += 2) {
    sum1 += func(a + i * h);
    sum2 += func(a + i * h + h / 2);
  }
  double sum = func(a) + func(b);
  sum += 4 * sum1 + 2 * sum2;
  sum *= h / 6;
  return sum;
}

int main() {
  // Заданные значения
  double a = 0;  // Нижний предел интегрирования
  double b = 1;  // Верхний предел интегрирования
  int n = 1000000;  // Количество интервалов

  // Вычисление интеграла методом прямоугольников
  double result_rectangle = integrate_rectangle(a, b, n);
  cout << "Интеграл (прямоугольники): " << result_rectangle << endl;

  // Вычисление интеграла методом трапеций
  double result_trapezoid = integrate_trapezoid(a, b, n);
  cout << "Интеграл (трапеции): " << result_trapezoid << endl;

  // Вычисление интеграла методом Симпсона
  double result_simpson = integrate_simpson(a, b, n);
  cout << "Интеграл (Симпсон): " << result_simpson << endl;

  return 0;
}


№2(C++)
#include <iostream>
#include <cmath>

using namespace std;

double func(double x) {
  return exp(-2 * x) * sin(5 * x);
}

double integrate_rectangle(double a, double b, int n) {
  double h = (b - a) / n;
  double sum = 0;
  for (int i = 0; i < n; ++i) {
    sum += func(a + i * h) * h;
  }
  return sum;
}

double integrate_trapezoid(double a, double b, int n) {
  double h = (b - a) / n;
  double sum = 0;
  for (int i = 0; i < n; ++i) {
    sum += func(a + i * h) + func(a + (i + 1) * h);
  }
  sum *= h / 2;
  return sum;
}

double integrate_simpson(double a, double b, int n) {
  double h = (b - a) / n;
  double sum1 = 0, sum2 = 0;
  for (int i = 1; i < n; i += 2) {
    sum1 += func(a + i * h);
    sum2 += func(a + i * h + h / 2);
  }
  double sum = func(a) + func(b);
  sum += 4 * sum1 + 2 * sum2;
  sum *= h / 6;
  return sum;
}

int main() {
  // Заданные значения
  double a = 0;  // Нижний предел интегрирования (не имеет смысла для неопределенного интеграла)
  double b = 1;  // Верхний предел интегрирования (не имеет смысла для неопределенного интеграла)
  int n = 10000000;  // Количество интервалов (большое значение для точности)

  // Вычисление интеграла методом прямоугольников
  double result_rectangle = integrate_rectangle(a, b, n);
  cout << "Интеграл (прямоугольники): " << result_rectangle << endl;

  // Вычисление интеграла методом трапеций
  double result_trapezoid = integrate_trapezoid(a, b, n);
  cout << "Интеграл (трапеции): " << result_trapezoid << endl;

  // Вычисление интеграла методом Симпсона
  double result_simpson = integrate_simpson(a, b, n);
  cout << "Интеграл (Симпсон): " << result_simpson << endl;

  return 0;
}

№3(Python)
def calculate_series_sum(n, epsilon):
  """
  Вычисляет сумму числового ряда с заданной точностью.

  Args:
      n: Максимальное число членов ряда, которые необходимо суммировать.
      epsilon: Требуемая точность вычислений.

  Returns:
      Сумму числового ряда.
  """
  sum = 0
  sign = 1
  for k in range(1, n + 1):
    term = sign * (1 / (2 * k - 1)) ** 5
    sum += term
    if abs(term) < epsilon:
      break
    sign *= -1
  return sum

n = 1000000  # Максимальное число членов ряда
epsilon = 1e-6  # Требуемая точность

series_sum = calculate_series_sum(n, epsilon)
print(f"Сумма ряда: {series_sum}")


№4(Python)
import cmath
import numpy as np

def calculate_series_sum(x, n, epsilon):
  """
  Вычисляет сумму функционального ряда с заданной точностью.

  Args:
      x: Значение аргумента x, для которого вычисляется сумма ряда.
      n: Максимальное число членов ряда, которые необходимо суммировать.
      epsilon: Требуемая точность вычислений.

  Returns:
      Сумму функционального ряда.
  """
  sum = cmath.sin(x)
  for k in range(2, n + 1):
    term = cmath.sin(k * x) / (5 + k ** 2)
    sum += term
    if abs(term) < epsilon:
      break
  return sum

x = 0  # Значение аргумента x
n = 1000000  # Максимальное число членов ряда
epsilon = 1e-6  # Требуемая точность

series_sum = calculate_series_sum(x, n, epsilon)
print(f"Сумма ряда для x = {x}: {series_sum}")
