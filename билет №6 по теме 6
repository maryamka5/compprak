№1(C++)
#include <iostream>
#include <vector>

using namespace std;

// Функция, для которой ищем минимум
double f(const vector<double>& x) {
    double sum = 0;
    for (double xi : x) {
        sum += exp(xi) + xi * xi + log(4 + x[0] + 2 * xi * xi * xi);
    }
    return sum;
}

// Градиент функции f(x)
vector<double> df(const vector<double>& x) {
    vector<double> grad(x.size());
    for (int i = 0; i < x.size(); ++i) {
        grad[i] = exp(x[i]) + 2 * x[i] + 2 * x[0] * x[i] * x[i] / (4 + x[0] + 2 * x[i] * x[i] * x[i]);
    }
    return grad;
}

// Алгоритм покоординатного спуска
vector<double> minimize(vector<double> x0, double alpha, double eps) {
    vector<double> x_current = x0;

    while (true) {
        // Вычисление градиента
        vector<double> grad = df(x_current);

        // Выбор координаты для изменения
        int j_min = 0;
        for (int j = 1; j < x_current.size(); ++j) {
            if (grad[j] < grad[j_min]) {
                j_min = j;
            }
        }

        // Сделать шаг в направлении антиградиента по координате j_min
        double x_next_j = x_current[j_min] - alpha * grad[j_min];

        // Проверка на допустимость шага
        vector<double> x_next = x_current;
        x_next[j_min] = x_next_j;
        if (f(x_next) > f(x_current)) {
            alpha *= 0.5;
            continue;
        }

        // Обновление решения
        x_current = x_next;

        // Условие остановки
        double norm_grad = 0;
        for (double gi : grad) {
            norm_grad += gi * gi;
        }
        norm_grad = sqrt(norm_grad);
        if (norm_grad < eps) {
            return x_current;
        }
    }
}

int main() {
    // Начальное решение
    vector<double> x0 = {0.0, 0.0};

    // Шаг алгоритма
    double alpha = 0.1;

    // Точность
    double eps = 1e-6;

    // Решение задачи
    vector<double> minimum = minimize(x0, alpha, eps);

    cout << "Минимум функции f(x) находится в точке x = [" << minimum[0] << ", " << minimum[1] << "]" << endl;
    cout << "Значение функции в этой точке: " << f(minimum) << endl;

    return 0;
}


№2(Python)
import cmath
import numpy as np

def f(x):
    return x**2 + cmath.exp(2j + x**2) + 4 + 32

def df(x):
    return 2 * x + 2j * cmath.exp(2j + x**2)

def minimize(x0, alpha, eps):
    x_current = x0

    while True:
        g = df(x_current)

        # Условие остановки
        if abs(g) < eps:
            return x_current

        x_next = x_current - alpha * g

        # Проверка на допустимость шага
        if np.abs(f(x_next) - f(x_current)) > 0:
            alpha *= 0.5
            continue

        x_current = x_next

    return x_current

if __name__ == "__main__":
    # Начальная точка
    x0 = 0.0

    # Шаг алгоритма
    alpha = 0.1

    # Точность
    eps = 1e-6

    # Решение задачи
    minimum = minimize(x0, alpha, eps)

    print(f"Минимум функции f(x) находится в точке x = {minimum:.6f}")
    print(f"Значение функции в этой точке: {np.abs(f(minimum)):.6f}")

