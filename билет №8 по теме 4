№1 (C++)
#include <iostream>

using namespace std;

void print_matrix(double A[][4], int n) {
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < 4; j++) {
      cout << A[i][j] << " ";
    }
    cout << endl;
  }
}

void gauss_jordan(double A[][4], double b[], int n) {
  for (int i = 0; i < n; i++) {
    // Выбор ведущего элемента
    int pivot_row = i;
    for (int j = i + 1; j < n; j++) {
      if (abs(A[j][i]) > abs(A[pivot_row][i])) {
        pivot_row = j;
      }
    }

    // Перестановка строк
    if (pivot_row != i) {
      for (int j = 0; j < 4; j++) {
        swap(A[i][j], A[pivot_row][j]);
        swap(b[i], b[pivot_row]);
      }
    }

    // Деление ведущей строки на ведущий элемент
    if (A[i][i] != 0) {
      for (int j = 0; j < 4; j++) {
        A[i][j] /= A[i][i];
      }
      b[i] /= A[i][i];
    }

    // Вычитание строк
    for (int j = i + 1; j < n; j++) {
      for (int k = 0; k < 4; k++) {
        A[j][k] -= A[i][k] * A[j][i];
      }
      b[j] -= b[i] * A[j][i];
    }
  }

  // Обратная подстановка
  for (int i = n - 1; i >= 0; i--) {
    for (int j = i + 1; j < 4; j++) {
      b[i] -= A[i][j] * b[j];
    }
    if (A[i][i] != 0) {
      b[i] /= A[i][i];
    }
  }
}

void print_solution(double x[], int n) {
  cout << "Решение:" << endl;
  for (int i = 0; i < n; i++) {
    cout << "x" << i + 1 << " = " << x[i] << endl;
  }
}

int main() {
  double

№2 (C++)
#include <iostream>

using namespace std;

int main() {
  double A[3][3] = {{5, 3, -2}, {2, -1, -3}, {3, -2, -3}};
  double b[3] = {1, 2, -1};
  double detA, detX1, detX2, detX3;

  // Вычисление определителя матрицы системы
  detA = A[0][0] * (A[1][1] * A[2][2] - A[1][2] * A[2][1]) +
         A[0][1] * (A[2][0] * A[1][2] - A[2][2] * A[1][0]) +
         A[0][2] * (A[1][0] * A[2][1] - A[1][1] * A[2][0]);

  // Вычисление определителей матриц с замененными столбцами
  detX1 = b[0] * (A[1][1] * A[2][2] - A[1][2] * A[2][1]) +
          b[1] * (A[2][0] * A[1][2] - A[2][2] * A[1][0]) +
          b[2] * (A[1][0] * A[2][1] - A[1][1] * A[2][0]);
  detX2 = A[0][0] * (b[1] * A[2][2] - b[2] * A[2][1]) +
         A[0][1] * (b[2] * A[1][0] - b[0] * A[1][2]) +
         A[0][2] * (b[0] * A[1][1] - b[1] * A[1][0]);
  detX3 = A[0][0] * (A[1][1] * b[2] - A[1][2] * b[1]) +
         A[0][1] * (A[2][1] * b[0] - A[2][0] * b[1]) +
         A[0][2] * (A[1][0] * b[1] - A[1][1] * b[0]);

  // Проверка на наличие решения
  if (detA == 0) {
    cout << "Система не имеет решения." << endl;
  } else {
    // Вычисление решений
    double x1 = detX1 / detA;
    double x2 = detX2 / detA;
    double x3 = detX3 / detA;

    // Вывод решений
    cout << "Решение:" << endl;
    cout << "x1 = " << x1 << endl;
    cout << "x2 = " << x2 << endl;
    cout << "x3 = " << x3 << endl;
  }

  return 0;
}

№3 (Python)
import numpy as np

def seidel(A, b, tol=0.01, max_iter=100):
  """
  Решает систему линейных алгебраических уравнений (СЛАУ) методом Зейделя.

  Args:
    A: Матрица коэффициентов системы (numpy.ndarray).
    b: Вектор правых частей системы (numpy.ndarray).
    tol: Погрешность (допустимое расхождение между итерациями).
    max_iter: Максимальное число итераций.

  Returns:
    x: Вектор решения системы (numpy.ndarray).
    iter: Число выполненных итераций.
  """

  n = len(A)
  x = np.zeros(n)
  for it in range(max_iter):
    for i in range(n):
      sum_m = 0
      for j in range(n):
        if j != i:
          sum_m += A[i, j] * x[j]
      x[i] = (b[i] - sum_m) / A[i, i]

    if np.linalg.norm(A.dot(x) - b) < tol:
      break

  return x, it

if __name__ == "__main__":
  # Заполнение матрицы коэффициентов и вектора правых частей
  A = np.array([
    [-7, 1, 2, -2],
    [3, -20, 0, -8],
    [-9, 1, 18, -6],
    [-1, -1, 6, -6],
  ])
  b = np.array([-24, -47, -28, -50])

  # Решение СЛАУ методом Зейделя
  x, iter = seidel(A, b)

  # Вывод решения и числа итераций
  print("Решение:", x)
  print("Число итераций:", iter)

№4(Python)
import numpy as np

def progonka(A, b):
  """
  Решает систему линейных алгебраических уравнений (СЛАУ) методом прогонки.

  Args:
    A: Матрица коэффициентов системы (numpy.ndarray).
    b: Вектор правых частей системы (numpy.ndarray).

  Returns:
    x: Вектор решения системы (numpy.ndarray).
  """

  n = len(A)
  l = np.zeros(n)
  u = np.zeros(n)
  z = np.zeros(n)
  x = np.zeros(n)

  # Прямой ход
  l[0] = 1
  for i in range(1, n):
    l[i] = A[i, i - 1] / A[i - 1, i - 1]
    u[i] = A[i, i] - l[i] * A[i - 1, i]

  # Вычисление z
  z[0] = b[0]
  for i in range(1, n):
    z[i] = b[i] - l[i] * z[i - 1]

  # Обратный ход
  x[n - 1] = z[n - 1] / u[n - 1]
  for i in range(n - 2, -1, -1):
    x[i] = (z[i] - u[i] * x[i + 1]) / l[i]

  return x

if __name__ == "__main__":
  # Заполнение матрицы коэффициентов и вектора правых частей
  A = np.array([
    [-11, -8, 0, 0, 0],
    [9, -17, 1, 0, 0],
    [0, 0, -4, 20, 9],
    [0, 0, -4, -14, 3],
    [0, 0, -6, 0, 14],
  ])
  b = np.array([99, -75, -66, -54, 8])

  # Решение СЛАУ методом прогонки
  x = progonka(A, b)

  # Вывод решения
  print("Решение:", x)
